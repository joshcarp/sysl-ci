// Code generated by sysl DO NOT EDIT.
package simple

import (
	"context"
	"fmt"
	"net/http"
	"net/url"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"
	"github.com/joshcarp/sysl-ci/gen/jsonplaceholder"
)

// Service interface for simple
type Service interface {
	Get(ctx context.Context, req *GetRequest) (*Welcome, error)
	GetFoobarList(ctx context.Context, req *GetFoobarListRequest) (*jsonplaceholder.TodosResponse, error)
}

// Client for simple API
type Client struct {
	client *http.Client
	url    string
}

// NewClient for simple
func NewClient(client *http.Client, serviceURL string) *Client {
	return &Client{client, serviceURL}
}

// Get ...
func (s *Client) Get(ctx context.Context, req *GetRequest) (*Welcome, error) {
	required := []string{}
	var okResponse Welcome
	u, err := url.Parse(fmt.Sprintf("%s/", s.url))
	if err != nil {
		return nil, common.CreateError(ctx, common.InternalError, "failed to parse url", err)
	}

	result, err := restlib.DoHTTPRequest(ctx, s.client, "GET", u.String(), nil, required, &okResponse, nil)
	if err != nil {
		return nil, common.CreateError(ctx, common.DownstreamUnavailableError, "call failed: simple <- GET "+u.String(), err)
	}

	if result.HTTPResponse.StatusCode == http.StatusUnauthorized {
		return nil, common.CreateDownstreamError(ctx, common.DownstreamUnauthorizedError, result.HTTPResponse, result.Body, nil)
	}
	OkWelcomeResponse, ok := result.Response.(*Welcome)
	if ok {
		valErr := validator.Validate(OkWelcomeResponse)
		if valErr != nil {
			return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, valErr)
		}

		return OkWelcomeResponse, nil
	}

	return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, nil)
}

// GetFoobarList ...
func (s *Client) GetFoobarList(ctx context.Context, req *GetFoobarListRequest) (*jsonplaceholder.TodosResponse, error) {
	required := []string{}
	var okResponse jsonplaceholder.TodosResponse
	u, err := url.Parse(fmt.Sprintf("%s/foobar", s.url))
	if err != nil {
		return nil, common.CreateError(ctx, common.InternalError, "failed to parse url", err)
	}

	result, err := restlib.DoHTTPRequest(ctx, s.client, "GET", u.String(), nil, required, &okResponse, nil)
	if err != nil {
		return nil, common.CreateError(ctx, common.DownstreamUnavailableError, "call failed: simple <- GET "+u.String(), err)
	}

	if result.HTTPResponse.StatusCode == http.StatusUnauthorized {
		return nil, common.CreateDownstreamError(ctx, common.DownstreamUnauthorizedError, result.HTTPResponse, result.Body, nil)
	}
	OkJsonplaceholdertodosResponseResponse, ok := result.Response.(*jsonplaceholder.TodosResponse)
	if ok {
		valErr := validator.Validate(OkJsonplaceholdertodosResponseResponse)
		if valErr != nil {
			return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, valErr)
		}

		return OkJsonplaceholdertodosResponseResponse, nil
	}

	return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, nil)
}
